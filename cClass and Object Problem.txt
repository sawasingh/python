class Dog:
    def __init__(self,name,bread):
        self.name = name
        self.bread = bread

    def bark(self):
        print(F"{self.name} its name of the dog")
        print(f"{self.bread} its a bread of the dog")

dog1 = Dog("Bella", "Goldern Retriver")
dog2 = Dog("Max", "Labrador")

dog1.bark()
dog2.bark()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class calculator:
    def __init__(self, num1, num2):
        self.num1 = num1
        self.num2 = num2

    def addition(self):
        print(f"The addition of {self.num1} and {self.num2} is {self.num1 + self.num2}")

    def subtraction(self):
        print(f"The subtraction of {self.num1} and {self.num2} is {self.num1 - self.num2}")

    def multiplication(self):
        print(f"The subtraction of {self.num1} and {self.num2} is {self.num1 * self.num2}")

    def division(self):
        if self.num2==0:
            print("Invalid Division")
        else:
            div = self.num1//self.num2
            print(f"The subtraction of {self.num1} and {self.num2} is {div}")
calci = calculator(12,2)
calci.addition()
calci.subtraction()
calci.multiplication()
calci.division()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class BankAccount:
    def __init__(self,holder_name,balance ):
        self.holder_name = holder_name
        self.balance = balance

    def deposit(self,amount):

        self.balance += amount
        print(f"{amount} deposited, available balance is {self.balance}")

    def withdraw(self,amount):
        if self.balance <= amount:
            print("Insuficient Balance")
        else:
            self.balance -= amount
            print(f"{amount} withdraw, available balance is {self.balance} ")

    def chec_balance(self):
        return (f"Account balance {self.holder_name}: {self.balance}")

account =   BankAccount("Sawai",1000)
account.deposit(2000)
account.withdraw(500)
print(account.chec_balance())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Student:
    def __init__(self,name, age, marks):
        self.name = name
        self.age = age
        self.marks = marks

    def display_details(self):
        print(f"Name of the student is {self.name}, Age: {self.age}, marks{self.marks}" )

    def has_passed(self):
        if self.marks>=40:
            return "passed"
        else:
            return "Failed"
student = Student("Sawai", 23, 100)
student.display_details()
print(student.has_passed())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Book:
    def __init__(self, title, author):
        self.title = title
        self.author = author
        self.is_available = True
    
    def borrow(self):
        if self.is_available:
            self.is_available = False
            print(f"you have borrowed {self.title}")

        else:
            print(f"{self.title} is not available")

    def return_book(self):
        if not self.is_available:
            self.is_available = True
            print(f"Thank You for returning {self.title}")

book1 = Book("The Titanic" , "Philips")

book1.borrow()
book1.borrow()
book1.return_book()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Employee:
  def __init__(self, name,id, salary):
    self.name = name
    self.salary = salary
    self.id = id
  def display_details(self):
    print(f"Name: {self.name}, id: {self.id}, salary: {self.salary}")
  def anually_salary(self):
    return self.salary * 12
  def partime(self):
    return 

employee1 = Employee("Saurab",101, 50000)
employee1.display_details()
print(employee1.anually_salary())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class employee:
    def __init__(self, name, id, salary,):
        self.name = name
        self.id = id
        self.salary = salary
        

    def partitme(self,time):
        return self.salary*time*30
    def fulltime(self,time):
        return time *self.salary*30
    
employee1 = employee("Sawai", 101, 1000)
print(employee1.partitme(4))
print(employee1.fulltime(8))
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Car:
    def __init__(self, color):
        self.__color = color

    def set_color(self, color):
        self.__color = color

    def get_color(self):
        return self.__color
    
car = Car("Red")
print(car.get_color())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Bankacount:
    def __init__(self, account_holder, balance):
        self.__account_holder = account_holder
        self.__balance = balance

    def get_account_holder(self):
        return self.__account_holder
    
    def get_balance(self):
        return self.__balance
    
    def deposit(self,amount):
        self.__balance+=amount
        print(f"{amount} deposited new balance is {self.__balance}")

    def withdraw(self,amount):
        if amount>self.__balance:
            print("Insufficent ammount")
        else:
            self.__balance-=amount
            print(f"{amount} withdrawd , now balance is {self.__balance}")
                  
    def check_balance(self):
        print(f"account holder {self.__account_holder} and balance is {self.__balance}")

details = Bankacount("Sawai", 1000)
print(details.get_account_holder())
print(details.get_balance())
details.deposit(1000)
details.withdraw(100)
details.check_balance()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class Student:
    def __init__(self, name, grade):
        self.name = name
        self.__grade = grade

    def get_grade(self):
        return self.__grade
    
    def set_grade(self,new_grade):
        if 0 <= new_grade <=100:
            self.__grade = new_grade
            return ("Grade Updated Successfully")
        else:
            return ("Invalid Grade")

    
student = Student("Sawai", 85)
print(student.name)
print(student.get_grade())
print(student.set_grade(90))
print(student.get_grade())
print(student.set_grade(101))
print(student.get_grade())
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

class health_care:
    def __init__(self,name , age, medical_history):
        self.__name = name
        self.__age = age
        self.__medical_history = medical_history
        self.records = []
        

    def access_details(self):
        return self.__medical_history
    
    def new_record(self):
        self.records.append(self.__medical_history)
        print(self.records)

rec = health_care("XYZ", 23, "Fiver")
rec.new_record()
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
        


